/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Thu Jun 23 2016 15:47:57 GMT-0500 (CDT).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

import PluginBase = require('plugin/PluginBase');
import PluginConfig = require('plugin/PluginConfig');
import MetaDataStr = require('text!./metadata.json');

class StreamingPlugin extends PluginBase {
  pluginMetadata: any;

  constructor() {
    super();
    this.pluginMetadata = JSON.parse(MetaDataStr);
  }

  /**
    Main function for the plugin to execute. This will perform the execution.
    Notes:
   - Always log with the provided logger.[error,warning,info,debug].
    - Do NOT put any user interaction logic UI, etc. inside this method.
    - callback always has to be called even if error happened.

    @param {function(string, plugin.PluginResult)} callback - the result callback
   */
  main(callback: PluginJS.Callback): void {
    let config = this.getCurrentConfig();
    if (!config.hasOwnProperty('fileName')) {
      callback(new Error('No file name provided.'), this.result);
    }
    let artifact = this.blobClient.createArtifact('serialized');
    artifact.addFile(config['fileName']);
    /**
    Visit the node and perform the function.
    */
    this.core.traverse(this.rootNode, { excludeRoot: true },
      (node: Node, finishFn: PluginJS.VoidCallback)=> {
        let core = this.core;
        let metaNode = core.getBaseType(node);
        let nodeName = core.getAttribute(node, 'name');
        // Library-roots do not have a meta-type.
        let metaName = metaNode ? core.getAttribute(metaNode, 'name') : ':LibraryRoot:';

        console.log(nodeName, 'at', core.getPath(node), 'is of meta type', metaName);
        finishFn();
      },
      (err: Error):void => {
        if (err) {
          this.logger.error('This is an error message.');
          // Something went wrong!
          // Handle the error and return.
        } else {
          console.log('At this point we have successfully visited all nodes.');
        }
      });
  }}

  export = StreamingPlugin;
