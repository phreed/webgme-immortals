/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Thu Jun 23 2016 15:47:57 GMT-0500 (CDT).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

import PluginBase = require('plugin/PluginBase');
import PluginConfig = require('plugin/PluginConfig');
import MetaDataStr = require('text!./metadata.json');

class StreamingPlugin extends PluginBase {
  pluginMetadata: any;

  constructor() {
    super();
    this.pluginMetadata = JSON.parse(MetaDataStr);
  }
    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    main(callback: PluginJS.Callback): void {
        let config = this.getCurrentConfig();

        console.log("main is running");
        // Using the logger.
        this.logger.debug('This is a debug message.');
        this.logger.info('This is an info message.');
        this.logger.warn('This is a warning message.');
        this.logger.error('This is an error message.');

        // Using the coreAPI to make changes.
        let nodeObject = this.activeNode;

        this.core.setAttribute(nodeObject, 'name', 'IMMoRTALS ROOT');
        this.core.setRegistry(nodeObject, 'position', {x: 70, y: 70});

        // This will save the changes. If you don't want to save;
        // exclude self.save and call callback directly from this scope.
        this.save('streaming plugin updated model.')
            .then(() => {
                this.result.setSuccess(true);
                callback(null, this.result);
            })
            .catch((err: Error) => {
                // Result success is false at invocation.
                callback(null, this.result);
            });
    }
}

export = StreamingPlugin;
